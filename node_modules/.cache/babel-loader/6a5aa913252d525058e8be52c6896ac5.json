{"ast":null,"code":"import _toConsumableArray from \"/home/beki/Documents/Data Science/React/react-starter-kit/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\nvar _jsxFileName = \"/home/beki/Documents/Data Science/React/react-starter-kit/src/graph.js\",\n    _s = $RefreshSig$();\n\nimport react, { useRef, useEffect } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport d from \"./d\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Graph(_ref) {\n  _s();\n\n  var data = _ref.data;\n  var forceRef = useRef();\n  useEffect(function () {}, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" bg-indigo-50 shadow-lg flex justify-center p-2  ring-2 ring-purple-100   rounded-lg \",\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D // className=\"border-2 rounder\"\n    , {\n      ref: forceRef,\n      graphData: data,\n      backgroundColor: \"#EEF2FF\",\n      width: \"690\",\n      height: \"700\",\n      minZoom: 5 //nodeAutoColorBy=\"group\"\n      ,\n      nodeCanvasObject: function nodeCanvasObject(node, ctx, globalScale) {\n        var label = node.id; //let fontSize = 12 / globalScale;\n\n        var fontSize = (8 + d[node.id][\"stats\"][\"count_job\"]) / globalScale;\n        ctx.font = \"\".concat(fontSize, \"px Sans-Serif\");\n        var textWidth = ctx.measureText(label).width;\n        var bckgDimensions = [textWidth, fontSize].map(function (n) {\n          return n + fontSize * 0.2;\n        }); // some padding\n\n        ctx.fillStyle = \"#EEF2FF\";\n        ctx.fillRect.apply(ctx, [node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2].concat(_toConsumableArray(bckgDimensions)));\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"#808080\";\n        ctx.fillText(label, node.x, node.y);\n        node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint\n      },\n      onEngineStop: function onEngineStop() {\n        return forceRef.current.zoomToFit(400);\n      },\n      nodePointerAreaPaint: function nodePointerAreaPaint(node, color, ctx) {\n        ctx.fillStyle = color;\n        var bckgDimensions = node.__bckgDimensions;\n        bckgDimensions && ctx.fillRect.apply(ctx, [node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2].concat(_toConsumableArray(bckgDimensions)));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Graph, \"TxYESRtw+XzKUI1LiKhMBv+9Ljk=\");\n\n_c = Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/home/beki/Documents/Data Science/React/react-starter-kit/src/graph.js"],"names":["react","useRef","useEffect","ForceGraph2D","d","Graph","data","forceRef","node","ctx","globalScale","label","id","fontSize","font","textWidth","measureText","width","bckgDimensions","map","n","fillStyle","fillRect","x","y","textAlign","textBaseline","fillText","__bckgDimensions","current","zoomToFit","color"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,CAAP,MAAc,KAAd;;AACA,eAAe,SAASC,KAAT,OAAyB;AAAA;;AAAA,MAARC,IAAQ,QAARA,IAAQ;AACtC,MAAMC,QAAQ,GAAGN,MAAM,EAAvB;AAEAC,EAAAA,SAAS,CAAC,YAAM,CAEf,CAFQ,EAEN,EAFM,CAAT;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,uFAAf;AAAA,2BACE,QAAC,YAAD,CACE;AADF;AAEE,MAAA,GAAG,EAAEK,QAFP;AAGE,MAAA,SAAS,EAAED,IAHb;AAIE,MAAA,eAAe,EAAC,SAJlB;AAKE,MAAA,KAAK,EAAC,KALR;AAME,MAAA,MAAM,EAAC,KANT;AAOE,MAAA,OAAO,EAAE,CAPX,CAQE;AARF;AASE,MAAA,gBAAgB,EAAE,0BAACE,IAAD,EAAOC,GAAP,EAAYC,WAAZ,EAA4B;AAC5C,YAAMC,KAAK,GAAGH,IAAI,CAACI,EAAnB,CAD4C,CAG5C;;AAEA,YAAMC,QAAQ,GAAG,CAAC,IAAIT,CAAC,CAACI,IAAI,CAACI,EAAN,CAAD,CAAW,OAAX,EAAoB,WAApB,CAAL,IAAyCF,WAA1D;AAEAD,QAAAA,GAAG,CAACK,IAAJ,aAAcD,QAAd;AACA,YAAME,SAAS,GAAGN,GAAG,CAACO,WAAJ,CAAgBL,KAAhB,EAAuBM,KAAzC;AACA,YAAMC,cAAc,GAAG,CAACH,SAAD,EAAYF,QAAZ,EAAsBM,GAAtB,CACrB,UAACC,CAAD;AAAA,iBAAOA,CAAC,GAAGP,QAAQ,GAAG,GAAtB;AAAA,SADqB,CAAvB,CAT4C,CAWzC;;AAEHJ,QAAAA,GAAG,CAACY,SAAJ,GAAgB,SAAhB;AACAZ,QAAAA,GAAG,CAACa,QAAJ,OAAAb,GAAG,GACDD,IAAI,CAACe,CAAL,GAASL,cAAc,CAAC,CAAD,CAAd,GAAoB,CAD5B,EAEDV,IAAI,CAACgB,CAAL,GAASN,cAAc,CAAC,CAAD,CAAd,GAAoB,CAF5B,4BAGEA,cAHF,GAAH;AAMAT,QAAAA,GAAG,CAACgB,SAAJ,GAAgB,QAAhB;AACAhB,QAAAA,GAAG,CAACiB,YAAJ,GAAmB,QAAnB;AACAjB,QAAAA,GAAG,CAACY,SAAJ,GAAgB,SAAhB;AACAZ,QAAAA,GAAG,CAACkB,QAAJ,CAAahB,KAAb,EAAoBH,IAAI,CAACe,CAAzB,EAA4Bf,IAAI,CAACgB,CAAjC;AAEAhB,QAAAA,IAAI,CAACoB,gBAAL,GAAwBV,cAAxB,CAzB4C,CAyBJ;AACzC,OAnCH;AAoCE,MAAA,YAAY,EAAE;AAAA,eAAMX,QAAQ,CAACsB,OAAT,CAAiBC,SAAjB,CAA2B,GAA3B,CAAN;AAAA,OApChB;AAqCE,MAAA,oBAAoB,EAAE,8BAACtB,IAAD,EAAOuB,KAAP,EAActB,GAAd,EAAsB;AAC1CA,QAAAA,GAAG,CAACY,SAAJ,GAAgBU,KAAhB;AACA,YAAMb,cAAc,GAAGV,IAAI,CAACoB,gBAA5B;AACAV,QAAAA,cAAc,IACZT,GAAG,CAACa,QAAJ,OAAAb,GAAG,GACDD,IAAI,CAACe,CAAL,GAASL,cAAc,CAAC,CAAD,CAAd,GAAoB,CAD5B,EAEDV,IAAI,CAACgB,CAAL,GAASN,cAAc,CAAC,CAAD,CAAd,GAAoB,CAF5B,4BAGEA,cAHF,GADL;AAMD;AA9CH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GA1DuBb,K;;KAAAA,K","sourcesContent":["import react, { useRef, useEffect } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport d from \"./d\";\nexport default function Graph({ data }) {\n  const forceRef = useRef();\n\n  useEffect(() => {\n\n  }, []);\n  return (\n    <div className=\" bg-indigo-50 shadow-lg flex justify-center p-2  ring-2 ring-purple-100   rounded-lg \">\n      <ForceGraph2D\n        // className=\"border-2 rounder\"\n        ref={forceRef}\n        graphData={data}\n        backgroundColor=\"#EEF2FF\"\n        width=\"690\"\n        height=\"700\"\n        minZoom={5}\n        //nodeAutoColorBy=\"group\"\n        nodeCanvasObject={(node, ctx, globalScale) => {\n          const label = node.id;\n\n          //let fontSize = 12 / globalScale;\n\n          const fontSize = (8 + d[node.id][\"stats\"][\"count_job\"]) / globalScale;\n\n          ctx.font = `${fontSize}px Sans-Serif`;\n          const textWidth = ctx.measureText(label).width;\n          const bckgDimensions = [textWidth, fontSize].map(\n            (n) => n + fontSize * 0.2\n          ); // some padding\n\n          ctx.fillStyle = \"#EEF2FF\";\n          ctx.fillRect(\n            node.x - bckgDimensions[0] / 2,\n            node.y - bckgDimensions[1] / 2,\n            ...bckgDimensions\n          );\n\n          ctx.textAlign = \"center\";\n          ctx.textBaseline = \"middle\";\n          ctx.fillStyle = \"#808080\";\n          ctx.fillText(label, node.x, node.y);\n\n          node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint\n        }}\n        onEngineStop={() => forceRef.current.zoomToFit(400)}\n        nodePointerAreaPaint={(node, color, ctx) => {\n          ctx.fillStyle = color;\n          const bckgDimensions = node.__bckgDimensions;\n          bckgDimensions &&\n            ctx.fillRect(\n              node.x - bckgDimensions[0] / 2,\n              node.y - bckgDimensions[1] / 2,\n              ...bckgDimensions\n            );\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}