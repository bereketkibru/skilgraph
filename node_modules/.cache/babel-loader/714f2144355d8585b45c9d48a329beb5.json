{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useMemo, createContext, useCallback, useContext, Fragment } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\n\nvar _reducers;\n\nvar DisclosureStates;\n\n(function (DisclosureStates) {\n  DisclosureStates[DisclosureStates[\"Open\"] = 0] = \"Open\";\n  DisclosureStates[DisclosureStates[\"Closed\"] = 1] = \"Closed\";\n})(DisclosureStates || (DisclosureStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"ToggleDisclosure\"] = 0] = \"ToggleDisclosure\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 1] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 2] = \"SetPanelId\";\n  ActionTypes[ActionTypes[\"LinkPanel\"] = 3] = \"LinkPanel\";\n  ActionTypes[ActionTypes[\"UnlinkPanel\"] = 4] = \"UnlinkPanel\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.ToggleDisclosure] = function (state) {\n  var _match;\n\n  return _extends({}, state, {\n    disclosureState: match(state.disclosureState, (_match = {}, _match[DisclosureStates.Open] = DisclosureStates.Closed, _match[DisclosureStates.Closed] = DisclosureStates.Open, _match))\n  });\n}, _reducers[ActionTypes.LinkPanel] = function (state) {\n  if (state.linkedPanel === true) return state;\n  return _extends({}, state, {\n    linkedPanel: true\n  });\n}, _reducers[ActionTypes.UnlinkPanel] = function (state) {\n  if (state.linkedPanel === false) return state;\n  return _extends({}, state, {\n    linkedPanel: false\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar DisclosureContext = /*#__PURE__*/createContext(null);\nDisclosureContext.displayName = 'DisclosureContext';\n\nfunction useDisclosureContext(component) {\n  var context = useContext(DisclosureContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext);\n    throw err;\n  }\n\n  return context;\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_DISCLOSURE_TAG = Fragment;\n\nfunction Disclosure(props) {\n  var _match2;\n\n  var _props$defaultOpen = props.defaultOpen,\n      defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"defaultOpen\"]);\n\n  var buttonId = \"headlessui-disclosure-button-\" + useId();\n  var panelId = \"headlessui-disclosure-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId: buttonId,\n    panelId: panelId\n  });\n  var disclosureState = reducerBag[0].disclosureState,\n      dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: disclosureState === DisclosureStates.Open\n    };\n  }, [disclosureState]);\n  return React.createElement(DisclosureContext.Provider, {\n    value: reducerBag\n  }, React.createElement(OpenClosedProvider, {\n    value: match(disclosureState, (_match2 = {}, _match2[DisclosureStates.Open] = State.Open, _match2[DisclosureStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: passthroughProps,\n    slot: slot,\n    defaultTag: DEFAULT_DISCLOSURE_TAG,\n    name: 'Disclosure'\n  })));\n} // ---\n\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _useDisclosureContext = useDisclosureContext([Disclosure.name, Button.name].join('.')),\n      state = _useDisclosureContext[0],\n      dispatch = _useDisclosureContext[1];\n\n  var buttonRef = useSyncRefs(ref);\n  var handleKeyDown = useCallback(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n      case Keys.Enter:\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes.ToggleDisclosure\n        });\n        break;\n    }\n  }, [dispatch]);\n  var handleKeyUp = useCallback(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n    dispatch({\n      type: ActionTypes.ToggleDisclosure\n    });\n  }, [dispatch, props.disabled]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var passthroughProps = props;\n  var propsWeControl = {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': props.disabled ? undefined : state.disclosureState === DisclosureStates.Open,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _useDisclosureContext2 = useDisclosureContext([Disclosure.name, Panel.name].join('.')),\n      state = _useDisclosureContext2[0],\n      dispatch = _useDisclosureContext2[1];\n\n  var panelRef = useSyncRefs(ref, function () {\n    if (state.linkedPanel) return;\n    dispatch({\n      type: ActionTypes.LinkPanel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.disclosureState === DisclosureStates.Open;\n  }(); // Unlink on \"unmount\" myself\n\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n\n    if (state.disclosureState === DisclosureStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    }\n  }, [state.disclosureState, props.unmount, dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Disclosure.Panel'\n  });\n}); // ---\n\nDisclosure.Button = Button;\nDisclosure.Panel = Panel;\nexport { Disclosure };","map":{"version":3,"mappings":"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","names":["DisclosureStates","ActionTypes","reducers","ToggleDisclosure","state","disclosureState","match","Open","Closed","LinkPanel","linkedPanel","UnlinkPanel","SetButtonId","action","buttonId","SetPanelId","panelId","DisclosureContext","createContext","displayName","useDisclosureContext","component","context","useContext","err","Error","Disclosure","name","captureStackTrace","stateReducer","type","DEFAULT_DISCLOSURE_TAG","Fragment","props","defaultOpen","_props$defaultOpen","passthroughProps","useId","reducerBag","useReducer","dispatch","useEffect","slot","useMemo","open","React","Provider","value","OpenClosedProvider","State","render","defaultTag","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","ref","join","buttonRef","useSyncRefs","handleKeyDown","useCallback","event","key","Keys","Space","Enter","preventDefault","stopPropagation","handleKeyUp","handleClick","isDisabledReactIssue7711","currentTarget","disabled","propsWeControl","id","undefined","onKeyDown","onKeyUp","onClick","DEFAULT_PANEL_TAG","PanelRenderFeatures","Features","RenderStrategy","Static","Panel","panelRef","usesOpenClosedState","useOpenClosed","visible","unmount","features"],"sources":["/home/beki/Documents/Data Science/React/react-starter-kit/node_modules/@headlessui/react/src/components/disclosure/disclosure.tsx"],"sourcesContent":["// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open }),\n    [disclosureState]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(disclosureState, {\n          [DisclosureStates.Open]: State.Open,\n          [DisclosureStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props: passthroughProps,\n          slot,\n          defaultTag: DEFAULT_DISCLOSURE_TAG,\n          name: 'Disclosure',\n        })}\n      </OpenClosedProvider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(ref)\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ToggleDisclosure })\n          break\n      }\n    },\n    [dispatch]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      dispatch({ type: ActionTypes.ToggleDisclosure })\n    },\n    [dispatch, props.disabled]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': props.disabled ? undefined : state.disclosureState === DisclosureStates.Open,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible,\n    name: 'Disclosure.Panel',\n  })\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n"]},"metadata":{},"sourceType":"module"}