{"ast":null,"code":"import { Bezier } from \"./bezier.js\"; // math-inlining.\n\nvar abs = Math.abs,\n    cos = Math.cos,\n    sin = Math.sin,\n    acos = Math.acos,\n    atan2 = Math.atan2,\n    sqrt = Math.sqrt,\n    pow = Math.pow; // cube root function yielding real roots\n\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n} // trig constants\n\n\nvar pi = Math.PI,\n    tau = 2 * pi,\n    quart = pi / 2,\n    // float precision significant decimal\nepsilon = 0.000001,\n    // extremas used in bbox calculation and similar algorithms\nnMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n    nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n    // a zero coordinate, which is surprisingly useful\nZERO = {\n  x: 0,\n  y: 0,\n  z: 0\n}; // Bezier utility functions\n\nvar utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [-0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404, 0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864, -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107, 0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696, -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761, 0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873, -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411, 0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745],\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264, 0.1258374563468282961213753825111836887264, 0.121670472927803391204463153476262425607, 0.121670472927803391204463153476262425607, 0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946, 0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279, 0.086190161531953275917185202983742667185, 0.086190161531953275917185202983742667185, 0.0733464814110803057340336152531165181193, 0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412, 0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491, 0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759],\n  arcfn: function arcfn(t, derivativeFn) {\n    var d = derivativeFn(t);\n    var l = d.x * d.x + d.y * d.y;\n\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n\n    return sqrt(l);\n  },\n  compute: function compute(t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    var order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    var mt = 1 - t;\n    var p = points; // constant?\n\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    } // linear?\n\n\n    if (order === 1) {\n      var ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t\n      };\n\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n\n      return ret;\n    } // quadratic/cubic curve?\n\n\n    if (order < 4) {\n      var mt2 = mt * mt,\n          t2 = t * t,\n          a,\n          b,\n          c,\n          d = 0;\n\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n\n      var _ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t\n      };\n\n      if (_3d) {\n        _ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n\n      return _ret;\n    } // higher order curves: use de Casteljau's computation\n\n\n    var dCpts = JSON.parse(JSON.stringify(points));\n\n    while (dCpts.length > 1) {\n      for (var i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t\n        };\n\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n  computeWithRatios: function computeWithRatios(t, points, ratios, _3d) {\n    var mt = 1 - t,\n        r = ratios,\n        p = points;\n    var f1 = r[0],\n        f2 = r[1],\n        f3 = r[2],\n        f4 = r[3],\n        d; // spec for linear\n\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t\n      };\n    } // upgrade to quadratic\n\n\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t\n      };\n    } // upgrade to cubic\n\n\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t\n      };\n    }\n  },\n  derive: function derive(points, _3d) {\n    var dpoints = [];\n\n    for (var p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      var list = [];\n\n      for (var j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y)\n        };\n\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n\n        list.push(dpt);\n      }\n\n      dpoints.push(list);\n      p = list;\n    }\n\n    return dpoints;\n  },\n  between: function between(v, m, M) {\n    return m <= v && v <= M || utils.approximately(v, m) || utils.approximately(v, M);\n  },\n  approximately: function approximately(a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n  length: function length(derivativeFn) {\n    var z = 0.5,\n        len = utils.Tvalues.length;\n    var sum = 0;\n\n    for (var i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n\n    return z * sum;\n  },\n  map: function map(v, ds, de, ts, te) {\n    var d1 = de - ds,\n        d2 = te - ts,\n        v2 = v - ds,\n        r = v2 / d1;\n    return ts + d2 * r;\n  },\n  lerp: function lerp(r, v1, v2) {\n    var ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y)\n    };\n\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n\n    return ret;\n  },\n  pointToString: function pointToString(p) {\n    var s = p.x + \"/\" + p.y;\n\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n\n    return s;\n  },\n  pointsToString: function pointsToString(points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n  copy: function copy(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n  angle: function angle(o, v1, v2) {\n    var dx1 = v1.x - o.x,\n        dy1 = v1.y - o.y,\n        dx2 = v2.x - o.x,\n        dy2 = v2.y - o.y,\n        cross = dx1 * dy2 - dy1 * dx2,\n        dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n  // round as string, to avoid rounding errors\n  round: function round(v, d) {\n    var s = \"\" + v;\n    var pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n  dist: function dist(p1, p2) {\n    var dx = p1.x - p2.x,\n        dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n  closest: function closest(LUT, point) {\n    var mdist = pow(2, 63),\n        mpos,\n        d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return {\n      mdist: mdist,\n      mpos: mpos\n    };\n  },\n  abcratio: function abcratio(t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n\n    var bottom = pow(t, n) + pow(1 - t, n),\n        top = bottom - 1;\n    return abs(top / bottom);\n  },\n  projectionratio: function projectionratio(t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n\n    var top = pow(1 - t, n),\n        bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n  lli8: function lli8(x1, y1, x2, y2, x3, y3, x4, y4) {\n    var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n        ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n        d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n    if (d == 0) {\n      return false;\n    }\n\n    return {\n      x: nx / d,\n      y: ny / d\n    };\n  },\n  lli4: function lli4(p1, p2, p3, p4) {\n    var x1 = p1.x,\n        y1 = p1.y,\n        x2 = p2.x,\n        y2 = p2.y,\n        x3 = p3.x,\n        y3 = p3.y,\n        x4 = p4.x,\n        y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n  lli: function lli(v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n  makeline: function makeline(p1, p2) {\n    return new Bezier(p1.x, p1.y, (p1.x + p2.x) / 2, (p1.y + p2.y) / 2, p2.x, p2.y);\n  },\n  findbbox: function findbbox(sections) {\n    var mx = nMax,\n        my = nMax,\n        MX = nMin,\n        MY = nMin;\n    sections.forEach(function (s) {\n      var bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: {\n        min: mx,\n        mid: (mx + MX) / 2,\n        max: MX,\n        size: MX - mx\n      },\n      y: {\n        min: my,\n        mid: (my + MY) / 2,\n        max: MY,\n        size: MY - my\n      }\n    };\n  },\n  shapeintersections: function shapeintersections(s1, bbox1, s2, bbox2, curveIntersectionThreshold) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    var intersections = [];\n    var a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    var a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        var iss = l1.intersects(l2, curveIntersectionThreshold);\n\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n  makeshape: function makeshape(forward, back, curveIntersectionThreshold) {\n    var bpl = back.points.length;\n    var fpl = forward.points.length;\n    var start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    var end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    var shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end])\n    };\n\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(shape, shape.bbox, s2, s2.bbox, curveIntersectionThreshold);\n    };\n\n    return shape;\n  },\n  getminmax: function getminmax(curve, d, list) {\n    if (!list) return {\n      min: 0,\n      max: 0\n    };\n    var min = nMax,\n        max = nMin,\n        t,\n        c;\n\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n\n    for (var i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n\n      if (c[d] < min) {\n        min = c[d];\n      }\n\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n\n    return {\n      min: min,\n      mid: (min + max) / 2,\n      max: max,\n      size: max - min\n    };\n  },\n  align: function align(points, line) {\n    var tx = line.p1.x,\n        ty = line.p1.y,\n        a = -atan2(line.p2.y - ty, line.p2.x - tx),\n        d = function d(v) {\n      return {\n        x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n        y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a)\n      };\n    };\n\n    return points.map(d);\n  },\n  roots: function roots(points, line) {\n    line = line || {\n      p1: {\n        x: 0,\n        y: 0\n      },\n      p2: {\n        x: 1,\n        y: 0\n      }\n    };\n    var order = points.length - 1;\n    var aligned = utils.align(points, line);\n\n    var reduce = function reduce(t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      var _a = aligned[0].y,\n          _b = aligned[1].y,\n          _c = aligned[2].y,\n          _d = _a - 2 * _b + _c;\n\n      if (_d !== 0) {\n        var m1 = -sqrt(_b * _b - _a * _c),\n            m2 = -_a + _b,\n            _v = -(m1 + m2) / _d,\n            v2 = -(-m1 + m2) / _d;\n\n        return [_v, v2].filter(reduce);\n      } else if (_b !== _c && _d === 0) {\n        return [(2 * _b - _c) / (2 * _b - 2 * _c)].filter(reduce);\n      }\n\n      return [];\n    } // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n\n\n    var pa = aligned[0].y,\n        pb = aligned[1].y,\n        pc = aligned[2].y,\n        pd = aligned[3].y;\n    var d = -pa + 3 * pb - 3 * pc + pd,\n        a = 3 * pa - 6 * pb + 3 * pc,\n        b = -3 * pa + 3 * pb,\n        c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        } // linear solution:\n\n\n        return [-c / b].filter(reduce);\n      } // quadratic solution:\n\n\n      var _q = sqrt(b * b - 4 * a * c),\n          a2 = 2 * a;\n\n      return [(_q - b) / a2, (-b - _q) / a2].filter(reduce);\n    } // at this point, we know we need a cubic solution:\n\n\n    a /= d;\n    b /= d;\n    c /= d;\n    var p = (3 * b - a * a) / 3,\n        p3 = p / 3,\n        q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n        q2 = q / 2,\n        discriminant = q2 * q2 + p3 * p3 * p3;\n    var u1, v1, x1, x2, x3;\n\n    if (discriminant < 0) {\n      var mp3 = -p / 3,\n          mp33 = mp3 * mp3 * mp3,\n          r = sqrt(mp33),\n          t = -q / (2 * r),\n          cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n          phi = acos(cosphi),\n          crtr = crt(r),\n          t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      var sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n  droots: function droots(p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      var a = p[0],\n          b = p[1],\n          c = p[2],\n          d = a - 2 * b + c;\n\n      if (d !== 0) {\n        var m1 = -sqrt(b * b - a * c),\n            m2 = -a + b,\n            v1 = -(m1 + m2) / d,\n            v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n\n      return [];\n    } // linear roots are even easier\n\n\n    if (p.length === 2) {\n      var _a2 = p[0],\n          _b2 = p[1];\n\n      if (_a2 !== _b2) {\n        return [_a2 / (_a2 - _b2)];\n      }\n\n      return [];\n    }\n\n    return [];\n  },\n  curvature: function curvature(t, d1, d2, _3d, kOnly) {\n    var num,\n        dnm,\n        adk,\n        dk,\n        k = 0,\n        r = 0; //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'² + y'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'² + y'² + z'²)^(3/2)\n    //\n\n    var d = utils.compute(t, d1);\n    var dd = utils.compute(t, d2);\n    var qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(pow(d.y * dd.z - dd.y * d.z, 2) + pow(d.z * dd.x - dd.z * d.x, 2) + pow(d.x * dd.y - dd.x * d.y, 2));\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return {\n        k: 0,\n        r: 0\n      };\n    }\n\n    k = num / dnm;\n    r = dnm / num; // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      var pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      var nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return {\n      k: k,\n      r: r,\n      dk: dk,\n      adk: adk\n    };\n  },\n  inflections: function inflections(points) {\n    if (points.length < 4) return []; // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    var p = utils.align(points, {\n      p1: points[0],\n      p2: points.slice(-1)[0]\n    }),\n        a = p[2].x * p[1].y,\n        b = p[3].x * p[1].y,\n        c = p[1].x * p[2].y,\n        d = p[3].x * p[2].y,\n        v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n        v2 = 18 * (3 * a - b - 3 * c),\n        v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        var t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n\n      return [];\n    }\n\n    var trm = v2 * v2 - 4 * v1 * v3,\n        sq = Math.sqrt(trm),\n        d2 = 2 * v1;\n    if (utils.approximately(d2, 0)) return [];\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n  bboxoverlap: function bboxoverlap(b1, b2) {\n    var dims = [\"x\", \"y\"],\n        len = dims.length;\n\n    for (var i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n\n    return true;\n  },\n  expandbox: function expandbox(bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n  pairiteration: function pairiteration(c1, c2, curveIntersectionThreshold) {\n    var c1b = c1.bbox(),\n        c2b = c2.bbox(),\n        r = 100000,\n        threshold = curveIntersectionThreshold || 0.5;\n\n    if (c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {\n      return [(r * (c1._t1 + c1._t2) / 2 | 0) / r + \"/\" + (r * (c2._t1 + c2._t2) / 2 | 0) / r];\n    }\n\n    var cc1 = c1.split(0.5),\n        cc2 = c2.split(0.5),\n        pairs = [{\n      left: cc1.left,\n      right: cc2.left\n    }, {\n      left: cc1.left,\n      right: cc2.right\n    }, {\n      left: cc1.right,\n      right: cc2.right\n    }, {\n      left: cc1.right,\n      right: cc2.left\n    }];\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n    var results = [];\n    if (pairs.length === 0) return results;\n    pairs.forEach(function (pair) {\n      results = results.concat(utils.pairiteration(pair.left, pair.right, threshold));\n    });\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n    return results;\n  },\n  getccenter: function getccenter(p1, p2, p3) {\n    var dx1 = p2.x - p1.x,\n        dy1 = p2.y - p1.y,\n        dx2 = p3.x - p2.x,\n        dy2 = p3.y - p2.y,\n        dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n        dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n        dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n        dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n        // chord midpoints\n    mx1 = (p1.x + p2.x) / 2,\n        my1 = (p1.y + p2.y) / 2,\n        mx2 = (p2.x + p3.x) / 2,\n        my2 = (p2.y + p3.y) / 2,\n        // midpoint offsets\n    mx1n = mx1 + dx1p,\n        my1n = my1 + dy1p,\n        mx2n = mx2 + dx2p,\n        my2n = my2 + dy2p,\n        // intersection of these lines:\n    arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n        r = utils.dist(arc, p1); // arc start/end values, over mid point:\n\n    var s = atan2(p1.y - arc.y, p1.x - arc.x),\n        m = atan2(p2.y - arc.y, p2.x - arc.x),\n        e = atan2(p3.y - arc.y, p3.x - arc.x),\n        _; // determine arc direction (cw/ccw correction)\n\n\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    } // assign and done.\n\n\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n  numberSort: function numberSort(a, b) {\n    return a - b;\n  }\n};\nexport { utils };","map":{"version":3,"sources":["/home/beki/Documents/Data Science/React/react-starter-kit/node_modules/bezier-js/src/utils.js"],"names":["Bezier","abs","Math","cos","sin","acos","atan2","sqrt","pow","crt","v","pi","PI","tau","quart","epsilon","nMax","Number","MAX_SAFE_INTEGER","nMin","MIN_SAFE_INTEGER","ZERO","x","y","z","utils","Tvalues","Cvalues","arcfn","t","derivativeFn","d","l","compute","points","_3d","order","length","mt","p","ret","mt2","t2","a","b","c","dCpts","JSON","parse","stringify","i","splice","computeWithRatios","ratios","r","f1","f2","f3","f4","derive","dpoints","list","j","dpt","push","between","m","M","approximately","precision","len","sum","map","ds","de","ts","te","d1","d2","v2","lerp","v1","undefined","pointToString","s","pointsToString","join","copy","obj","angle","o","dx1","dy1","dx2","dy2","cross","dot","round","pos","indexOf","parseFloat","substring","dist","p1","p2","dx","dy","closest","LUT","point","mdist","mpos","forEach","idx","abcratio","n","bottom","top","projectionratio","lli8","x1","y1","x2","y2","x3","y3","x4","y4","nx","ny","lli4","p3","p4","lli","makeline","findbbox","sections","mx","my","MX","MY","bbox","min","max","mid","size","shapeintersections","s1","bbox1","s2","bbox2","curveIntersectionThreshold","bboxoverlap","intersections","a1","startcap","forward","back","endcap","a2","l1","virtual","l2","iss","intersects","c1","c2","makeshape","bpl","fpl","start","end","shape","getminmax","curve","concat","get","align","line","tx","ty","roots","aligned","reduce","m1","m2","filter","pa","pb","pc","pd","q","q2","discriminant","u1","mp3","mp33","cosphi","phi","crtr","t1","sd","droots","curvature","kOnly","num","dnm","adk","dk","k","dd","qdsum","pk","nk","inflections","slice","v3","trm","sq","b1","b2","dims","dim","expandbox","_bbox","pairiteration","c1b","c2b","threshold","_t1","_t2","cc1","split","cc2","pairs","left","right","pair","results","getccenter","dx1p","dy1p","dx2p","dy2p","mx1","my1","mx2","my2","mx1n","my1n","mx2n","my2n","arc","e","_","numberSort"],"mappings":"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","sourcesContent":["import { Bezier } from \"./bezier.js\";\n\n// math-inlining.\nconst { abs, cos, sin, acos, atan2, sqrt, pow } = Math;\n\n// cube root function yielding real roots\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n}\n\n// trig constants\nconst pi = Math.PI,\n  tau = 2 * pi,\n  quart = pi / 2,\n  // float precision significant decimal\n  epsilon = 0.000001,\n  // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n  // a zero coordinate, which is surprisingly useful\n  ZERO = { x: 0, y: 0, z: 0 };\n\n// Bezier utility functions\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [\n    -0.0640568928626056260850430826247450385909,\n    0.0640568928626056260850430826247450385909,\n    -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404,\n    -0.3150426796961633743867932913198102407864,\n    0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524,\n    0.4337935076260451384870842319133497124524,\n    -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107,\n    -0.6480936519369755692524957869107476266696,\n    0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232,\n    0.7401241915785543642438281030999784255232,\n    -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761,\n    -0.8864155270044010342131543419821967550873,\n    0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548,\n    0.9382745520027327585236490017087214496548,\n    -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411,\n    -0.9951872199970213601799974097007368118745,\n    0.9951872199970213601799974097007368118745,\n  ],\n\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [\n    0.1279381953467521569740561652246953718517,\n    0.1279381953467521569740561652246953718517,\n    0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264,\n    0.121670472927803391204463153476262425607,\n    0.121670472927803391204463153476262425607,\n    0.1155056680537256013533444839067835598622,\n    0.1155056680537256013533444839067835598622,\n    0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946,\n    0.0976186521041138882698806644642471544279,\n    0.0976186521041138882698806644642471544279,\n    0.086190161531953275917185202983742667185,\n    0.086190161531953275917185202983742667185,\n    0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193,\n    0.0592985849154367807463677585001085845412,\n    0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593,\n    0.0442774388174198061686027482113382288593,\n    0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491,\n    0.0123412297999871995468056670700372915759,\n    0.0123412297999871995468056670700372915759,\n  ],\n\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n    return sqrt(l);\n  },\n\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points;\n\n    // constant?\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    }\n\n    // linear?\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n      return ret;\n    }\n\n    // quadratic/cubic curve?\n    if (order < 4) {\n      let mt2 = mt * mt,\n        t2 = t * t,\n        a,\n        b,\n        c,\n        d = 0;\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n      return ret;\n    }\n\n    // higher order curves: use de Casteljau's computation\n    const dCpts = JSON.parse(JSON.stringify(points));\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t,\n        };\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n      r = ratios,\n      p = points;\n\n    let f1 = r[0],\n      f2 = r[1],\n      f3 = r[2],\n      f4 = r[3],\n      d;\n\n    // spec for linear\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to quadratic\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to cubic\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d\n          ? false\n          : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t,\n      };\n    }\n  },\n\n  derive: function (points, _3d) {\n    const dpoints = [];\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y),\n        };\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n        list.push(dpt);\n      }\n      dpoints.push(list);\n      p = list;\n    }\n    return dpoints;\n  },\n\n  between: function (v, m, M) {\n    return (\n      (m <= v && v <= M) ||\n      utils.approximately(v, m) ||\n      utils.approximately(v, M)\n    );\n  },\n\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n\n  length: function (derivativeFn) {\n    const z = 0.5,\n      len = utils.Tvalues.length;\n\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n    return z * sum;\n  },\n\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n      d2 = te - ts,\n      v2 = v - ds,\n      r = v2 / d1;\n    return ts + d2 * r;\n  },\n\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y),\n    };\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n    return ret;\n  },\n\n  pointToString: function (p) {\n    let s = p.x + \"/\" + p.y;\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n    return s;\n  },\n\n  pointsToString: function (points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n      dy1 = v1.y - o.y,\n      dx2 = v2.x - o.x,\n      dy2 = v2.y - o.y,\n      cross = dx1 * dy2 - dy1 * dx2,\n      dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = \"\" + v;\n    const pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n      mpos,\n      d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return { mdist: mdist, mpos: mpos };\n  },\n\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const bottom = pow(t, n) + pow(1 - t, n),\n      top = bottom - 1;\n    return abs(top / bottom);\n  },\n\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const top = pow(1 - t, n),\n      bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx =\n        (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0) {\n      return false;\n    }\n    return { x: nx / d, y: ny / d };\n  },\n\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      x3 = p3.x,\n      y3 = p3.y,\n      x4 = p4.x,\n      y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n\n  makeline: function (p1, p2) {\n    return new Bezier(\n      p1.x,\n      p1.y,\n      (p1.x + p2.x) / 2,\n      (p1.y + p2.y) / 2,\n      p2.x,\n      p2.y\n    );\n  },\n\n  findbbox: function (sections) {\n    let mx = nMax,\n      my = nMax,\n      MX = nMin,\n      MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my },\n    };\n  },\n\n  shapeintersections: function (\n    s1,\n    bbox1,\n    s2,\n    bbox2,\n    curveIntersectionThreshold\n  ) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end]),\n    };\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(\n        shape,\n        shape.bbox,\n        s2,\n        s2.bbox,\n        curveIntersectionThreshold\n      );\n    };\n    return shape;\n  },\n\n  getminmax: function (curve, d, list) {\n    if (!list) return { min: 0, max: 0 };\n    let min = nMax,\n      max = nMin,\n      t,\n      c;\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n      if (c[d] < min) {\n        min = c[d];\n      }\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\n  },\n\n  align: function (points, line) {\n    const tx = line.p1.x,\n      ty = line.p1.y,\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\n      d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a),\n        };\n      };\n    return points.map(d);\n  },\n\n  roots: function (points, line) {\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\n\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n        b = aligned[1].y,\n        c = aligned[2].y,\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n      return [];\n    }\n\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n    const pa = aligned[0].y,\n      pb = aligned[1].y,\n      pc = aligned[2].y,\n      pd = aligned[3].y;\n\n    let d = -pa + 3 * pb - 3 * pc + pd,\n      a = 3 * pa - 6 * pb + 3 * pc,\n      b = -3 * pa + 3 * pb,\n      c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        }\n        // linear solution:\n        return [-c / b].filter(reduce);\n      }\n      // quadratic solution:\n      const q = sqrt(b * b - 4 * a * c),\n        a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    }\n\n    // at this point, we know we need a cubic solution:\n\n    a /= d;\n    b /= d;\n    c /= d;\n\n    const p = (3 * b - a * a) / 3,\n      p3 = p / 3,\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n      q2 = q / 2,\n      discriminant = q2 * q2 + p3 * p3 * p3;\n\n    let u1, v1, x1, x2, x3;\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n        mp33 = mp3 * mp3 * mp3,\n        r = sqrt(mp33),\n        t = -q / (2 * r),\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n        phi = acos(cosphi),\n        crtr = crt(r),\n        t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n        b = p[1],\n        c = p[2],\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n      return [];\n    }\n\n    // linear roots are even easier\n    if (p.length === 2) {\n      const a = p[0],\n        b = p[1];\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n      return [];\n    }\n\n    return [];\n  },\n\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n      dnm,\n      adk,\n      dk,\n      k = 0,\n      r = 0;\n\n    //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'² + y'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'² + y'² + z'²)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(\n        pow(d.y * dd.z - dd.y * d.z, 2) +\n          pow(d.z * dd.x - dd.z * d.x, 2) +\n          pow(d.x * dd.y - dd.x * d.y, 2)\n      );\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return { k: 0, r: 0 };\n    }\n\n    k = num / dnm;\n    r = dnm / num;\n\n    // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return { k: k, r: r, dk: dk, adk: adk };\n  },\n\n  inflections: function (points) {\n    if (points.length < 4) return [];\n\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n      a = p[2].x * p[1].y,\n      b = p[3].x * p[1].y,\n      c = p[1].x * p[2].y,\n      d = p[3].x * p[2].y,\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n      v2 = 18 * (3 * a - b - 3 * c),\n      v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n      return [];\n    }\n\n    const trm = v2 * v2 - 4 * v1 * v3,\n      sq = Math.sqrt(trm),\n      d2 = 2 * v1;\n\n    if (utils.approximately(d2, 0)) return [];\n\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n\n  bboxoverlap: function (b1, b2) {\n    const dims = [\"x\", \"y\"],\n      len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n    return true;\n  },\n\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n      c2b = c2.bbox(),\n      r = 100000,\n      threshold = curveIntersectionThreshold || 0.5;\n\n    if (\n      c1b.x.size + c1b.y.size < threshold &&\n      c2b.x.size + c2b.y.size < threshold\n    ) {\n      return [\n        (((r * (c1._t1 + c1._t2)) / 2) | 0) / r +\n          \"/\" +\n          (((r * (c2._t1 + c2._t2)) / 2) | 0) / r,\n      ];\n    }\n\n    let cc1 = c1.split(0.5),\n      cc2 = c2.split(0.5),\n      pairs = [\n        { left: cc1.left, right: cc2.left },\n        { left: cc1.left, right: cc2.right },\n        { left: cc1.right, right: cc2.right },\n        { left: cc1.right, right: cc2.left },\n      ];\n\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n\n    let results = [];\n\n    if (pairs.length === 0) return results;\n\n    pairs.forEach(function (pair) {\n      results = results.concat(\n        utils.pairiteration(pair.left, pair.right, threshold)\n      );\n    });\n\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n\n    return results;\n  },\n\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n      dy1 = p2.y - p1.y,\n      dx2 = p3.x - p2.x,\n      dy2 = p3.y - p2.y,\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n      // chord midpoints\n      mx1 = (p1.x + p2.x) / 2,\n      my1 = (p1.y + p2.y) / 2,\n      mx2 = (p2.x + p3.x) / 2,\n      my2 = (p2.y + p3.y) / 2,\n      // midpoint offsets\n      mx1n = mx1 + dx1p,\n      my1n = my1 + dy1p,\n      mx2n = mx2 + dx2p,\n      my2n = my2 + dy2p,\n      // intersection of these lines:\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n      r = utils.dist(arc, p1);\n\n    // arc start/end values, over mid point:\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\n      _;\n\n    // determine arc direction (cw/ccw correction)\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    }\n    // assign and done.\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n\n  numberSort: function (a, b) {\n    return a - b;\n  },\n};\n\nexport { utils };\n"]},"metadata":{},"sourceType":"module"}